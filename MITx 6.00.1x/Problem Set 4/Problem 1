# Problem 1 - Word Scores [10.0/10.0 points (graded)]
# author: @raj-ch017

"""

The first step is to implement some code that allows us to calculate the score for a single word. 
The function getWordScore should accept as input a string of lowercase letters (a word) and return the integer score for that word, using the game's scoring rules.


  A Reminder of the Scoring Rules:

  Scoring

      The score for the hand is the sum of the scores for each word formed.

      The score for a word is the sum of the points for letters in the word, multiplied by the length of the word, 
      plus 50 points if all n letters are used on the first word created.

      Letters are scored as in Scrabble; A is worth 1, B is worth 3, C is worth 3, D is worth 2, E is worth 1, and so on. 
      We have defined the dictionary SCRABBLE_LETTER_VALUES that maps each lowercase letter to its Scrabble letter value.

      For example:
      
      'weed' would be worth 32 points ((4+1+1+2) for the four letters, then multiply by len('weed') to get (4+1+1+2)*4 = 32). 
      Be sure to check that the hand actually has 1 'w', 2 'e's, and 1 'd' before scoring the word!

      As another example:
      
      if n=7 and you make the word 'waybill' on the first try, it would be worth 155 points 
      (the base score for 'waybill' is (4+1+4+3+1+1+1)*7=105, plus an additional 50 point bonus for using all n letters).

"""

def getWordScore(word, n):
    """
    Returns the score for a word. Assumes the word is a valid word.

    The score for a word is the sum of the points for letters in the
    word, multiplied by the length of the word, PLUS 50 points if all n
    letters are used on the first turn.

    Letters are scored as in Scrabble; A is worth 1, B is worth 3, C is
    worth 3, D is worth 2, E is worth 1, and so on (see SCRABBLE_LETTER_VALUES)

    word: string (lowercase letters)
    n: integer (HAND_SIZE; i.e., hand size required for additional points)
    returns: int >= 0
    """
    SCRABBLE_LETTER_VALUES # to be used to check point for each letter
    letter_used = 0
    score = 0
    
    if len(word) == 0:
        return 0
    else:

        for letter in word:
            point = SCRABBLE_LETTER_VALUES[letter]
            score = score + point
            letter_used += 1
        score = score * len(word)
        if letter_used == n:
            score += 50
    
        return score
